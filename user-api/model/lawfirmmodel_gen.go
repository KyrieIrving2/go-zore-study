// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	lawFirmFieldNames          = builder.RawFieldNames(&LawFirm{})
	lawFirmRows                = strings.Join(lawFirmFieldNames, ",")
	lawFirmRowsExpectAutoSet   = strings.Join(stringx.Remove(lawFirmFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	lawFirmRowsWithPlaceHolder = strings.Join(stringx.Remove(lawFirmFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"
)

type (
	lawFirmModel interface {
		Insert(ctx context.Context, data *LawFirm) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LawFirm, error)
		FindOneByLicenseNo(ctx context.Context, licenseNo sql.NullString) (*LawFirm, error)
		Update(ctx context.Context, data *LawFirm) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLawFirmModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LawFirm struct {
		Id                     int64          `db:"id"`                       // 主键
		OrgType                int64          `db:"org_type"`                 // 机构类型
		Name                   string         `db:"name"`                     // 全称
		EngName                sql.NullString `db:"eng_name"`                 // 英文名称
		ShortName              sql.NullString `db:"short_name"`               // 简称
		Country                sql.NullString `db:"country"`                  // 国家code
		RegionId               sql.NullInt64  `db:"region_id"`                // 城市
		RegistrationAddress    sql.NullString `db:"registration_address"`     // 注册地址
		FoundOn                sql.NullTime   `db:"found_on"`                 // 成立日期
		OrgScale               sql.NullInt64  `db:"org_scale"`                // 规模
		LicenseNo              sql.NullString `db:"license_no"`               // 执照编号(社会信用代码)
		LicenseInvalidDate     sql.NullTime   `db:"license_invalid_date"`     // 执照失效期
		LicenceAttachmentId    sql.NullInt64  `db:"licence_attachment_id"`    // 执照附件Id
		LegalRepresentative    sql.NullString `db:"legal_representative"`     // 法定代表人
		Introduce              sql.NullString `db:"introduce"`                // 介绍
		ConfidentialLevel      sql.NullInt64  `db:"confidential_level"`       // 保密级别
		CoreTechnology         sql.NullString `db:"core_technology"`          // 核心技术
		OtherExperiencedDomain sql.NullString `db:"other_experienced_domain"` // 其它擅长领域
		State                  sql.NullInt64  `db:"state"`                    // 律所状态（草稿、驳回修改、审核中、在线、已注销、黑名单）
		TencentInviter         sql.NullString `db:"tencent_inviter"`          // 腾讯邀请人
		Email                  sql.NullString `db:"email"`
		CreatedBy              string         `db:"created_by"`
		CreatedAtUtc           time.Time      `db:"created_at_utc"`
		UpdatedBy              sql.NullString `db:"updated_by"`
		UpdatedAtUtc           time.Time      `db:"updated_at_utc"`
		InterfacePerson        string         `db:"interface_person"`         // 接口人
		InterfaceEmail         string         `db:"interface_email"`          // 接口人邮箱
		InterfacePhone         sql.NullString `db:"interface_phone"`          // 接口人手机号
		Remark                 sql.NullString `db:"remark"`                   // 备注
		IsInterestConflict     int64          `db:"is_interest_conflict"`     // 是否利益冲突
		InterestConflictRemark sql.NullString `db:"interest_conflict_remark"` // 利益冲突备注
		VendorId               sql.NullInt64  `db:"vendor_id"`                // 集团合同管理系统内供应商id
		VendorName             sql.NullString `db:"vendor_name"`              // 集团合同管理系统内供应商名称
		IsBlack                sql.NullInt64  `db:"is_black"`                 // 是否黑名单  1是 0不是
		IsFreeze               sql.NullInt64  `db:"is_freeze"`                // 是否冻结 1是 0不是
		IsInLibrary            sql.NullInt64  `db:"is_in_library"`            // 是否系统库内供应商
		IsInternal             sql.NullInt64  `db:"is_internal"`              // 是否自维护供应商
		Phone                  sql.NullString `db:"phone"`                    // 自维护供应商手机号
	}
)

func newLawFirmModel(conn sqlx.SqlConn) *defaultLawFirmModel {
	return &defaultLawFirmModel{
		conn:  conn,
		table: "`law_firm`",
	}
}

func (m *defaultLawFirmModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLawFirmModel) FindOne(ctx context.Context, id int64) (*LawFirm, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", lawFirmRows, m.table)
	var resp LawFirm
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLawFirmModel) FindOneByLicenseNo(ctx context.Context, licenseNo sql.NullString) (*LawFirm, error) {
	var resp LawFirm
	query := fmt.Sprintf("select %s from %s where `license_no` = ? limit 1", lawFirmRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, licenseNo)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLawFirmModel) Insert(ctx context.Context, data *LawFirm) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, lawFirmRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.OrgType, data.Name, data.EngName, data.ShortName, data.Country, data.RegionId, data.RegistrationAddress, data.FoundOn, data.OrgScale, data.LicenseNo, data.LicenseInvalidDate, data.LicenceAttachmentId, data.LegalRepresentative, data.Introduce, data.ConfidentialLevel, data.CoreTechnology, data.OtherExperiencedDomain, data.State, data.TencentInviter, data.Email, data.CreatedBy, data.CreatedAtUtc, data.UpdatedBy, data.UpdatedAtUtc, data.InterfacePerson, data.InterfaceEmail, data.InterfacePhone, data.Remark, data.IsInterestConflict, data.InterestConflictRemark, data.VendorId, data.VendorName, data.IsBlack, data.IsFreeze, data.IsInLibrary, data.IsInternal, data.Phone)
	return ret, err
}

func (m *defaultLawFirmModel) Update(ctx context.Context, newData *LawFirm) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, lawFirmRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.OrgType, newData.Name, newData.EngName, newData.ShortName, newData.Country, newData.RegionId, newData.RegistrationAddress, newData.FoundOn, newData.OrgScale, newData.LicenseNo, newData.LicenseInvalidDate, newData.LicenceAttachmentId, newData.LegalRepresentative, newData.Introduce, newData.ConfidentialLevel, newData.CoreTechnology, newData.OtherExperiencedDomain, newData.State, newData.TencentInviter, newData.Email, newData.CreatedBy, newData.CreatedAtUtc, newData.UpdatedBy, newData.UpdatedAtUtc, newData.InterfacePerson, newData.InterfaceEmail, newData.InterfacePhone, newData.Remark, newData.IsInterestConflict, newData.InterestConflictRemark, newData.VendorId, newData.VendorName, newData.IsBlack, newData.IsFreeze, newData.IsInLibrary, newData.IsInternal, newData.Phone, newData.Id)
	return err
}

func (m *defaultLawFirmModel) tableName() string {
	return m.table
}
